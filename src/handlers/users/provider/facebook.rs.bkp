extern crate oauth2;
extern crate reqwest;
extern crate rocket;

use crate::config::Config;
use crate::error::Error;
use crate::handlers::users::provider::ProviderResponse;
use crate::handlers::users::provider::ProviderState;
use log::error;
use oauth2::basic::BasicClient;
use oauth2::reqwest::http_client;
use oauth2::{
    AuthUrl, AuthorizationCode, ClientId, ClientSecret, CsrfToken, RedirectUrl, Scope,
    TokenResponse, TokenUrl,
};
use rocket::response::Redirect;
use rocket::State;
use url::Url;

fn facebook_client(config: Config) -> Result<BasicClient, Error> {
    let internal_error = Error {
        code: 500,
        body: json!({
            "code": "internal_error",
        }),
    };

    let client_id = ClientId::new(config.facebook_client_id.clone().unwrap());

    let client_secret = Some(ClientSecret::new(
        config.facebook_client_secret.clone().unwrap(),
    ));

    let auth_url = Url::parse("https://www.facebook.com/v5.0/dialog/oauth");

    if auth_url.is_err() {
        let err = auth_url.err().unwrap();

        error!("{:?}", err);

        return Err(internal_error);
    }

    let auth_url = AuthUrl::new(auth_url.unwrap());

    let token_url = Url::parse("https://graph.facebook.com/oauth/access_token");

    if token_url.is_err() {
        let err = token_url.err().unwrap();

        error!("{:?}", err);

        return Err(internal_error);
    }

    let token_url = Some(TokenUrl::new(token_url.unwrap()));

    let redirect_url = format!("{}/authorize/facebook/callback", config.instance_url);

    let redirect_url = Url::parse(redirect_url.as_str());

    if redirect_url.is_err() {
        let err = redirect_url.err().unwrap();

        error!("{:?}", err);

        return Err(internal_error);
    }

    let redirect_url = RedirectUrl::new(redirect_url.unwrap());

    return Ok(
        BasicClient::new(client_id, client_secret, auth_url, token_url)
            .set_redirect_url(redirect_url),
    );
}

#[get("/authorize/facebook")]
pub fn facebook(config: State<Config>) -> ProviderResponse {
    if !config.facebook_enabled {
        return ProviderResponse::Other(Err(Error {
            code: 400,
            body: json!({
                "code": "provider_disabled",
            }),
        }));
    }

    let internal_error = Error {
        code: 500,
        body: json!({
            "code": "internal_error",
        }),
    };

    let client = facebook_client(config.clone());

    if client.is_err() {
        return ProviderResponse::Other(Err(client.err().unwrap()));
    }

    let client = client.unwrap();

    let state = ProviderState::new("facebook".to_string());

    let state = state.sign(config.inner());

    if state.is_err() {
        let err = state.err().unwrap();

        error!("{:?}", err);

        return ProviderResponse::Other(Err(internal_error));
    }

    let state = state.unwrap();

    let (auth_url, _) = client
        .authorize_url(|| CsrfToken::new(state))
        .add_scope(Scope::new("email".to_string()))
        .url();

    return ProviderResponse::Redirect(Redirect::to(auth_url.into_string()));
}

#[get("/authorize/facebook/callback?<code>&<state>")]
pub fn callback(config: State<Config>, code: String, state: String) -> ProviderResponse {
    let state = ProviderState::verify(state, config.inner());

    if state.is_err() {
        let err = state.err().unwrap();

        error!("{:?}", err);

        let redirect_url = format!("{}?error=invalid_state", config.site_url);

        return ProviderResponse::Redirect(Redirect::to(redirect_url));
    }

    let client = facebook_client(config.clone());

    if client.is_err() {
        let redirect_url = format!("{}?error=internal_error", config.site_url);

        return ProviderResponse::Redirect(Redirect::to(redirect_url));
    }

    let client = client.unwrap();

    let access_token = client
        .exchange_code(AuthorizationCode::new(code))
        .request(http_client);

    if access_token.is_err() {
        let err = access_token.err().unwrap();

        error!("{:?}", err);

        let redirect_url = format!("{}?error=error_exchanging_code", config.site_url);

        return ProviderResponse::Redirect(Redirect::to(redirect_url));
    }

    let access_token = access_token.unwrap();

    let client = reqwest::Client::new();

    let profile_url = Url::parse("https://graph.facebook.com/me?fields=email,name").unwrap();

    let response = client
        .get(profile_url.into_string().as_str())
        .bearer_auth(access_token.access_token().secret())
        .send();

    if response.is_err() {
        let err = response.err().unwrap();

        error!("{:?}", err);

        let redirect_url = format!("{}?error=error_fetching_profile_info", config.site_url);

        return ProviderResponse::Redirect(Redirect::to(redirect_url));
    }

    let response = response.unwrap();

    println!("{:?}", response);

    return ProviderResponse::Other(Err(Error {
        code: 403,
        body: json!({ "body": "test" }),
    }));
}
